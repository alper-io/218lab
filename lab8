#include<iostream>
#include<cctype>
#include<cstring>
#include<queue>
using namespace std;

const int MAX_SIZE = 10000; // Maximum size of the stack

template<typename T>
class Stack {
private:
    T arr[MAX_SIZE];
    int topIndex;
    int stackSize;
public:
    Stack(int sz = 100) : topIndex(-1), stackSize(sz) {
        if (sz > MAX_SIZE) {
            cout << "System Error: Size cannot be greater than " << MAX_SIZE << endl;
            exit(EXIT_FAILURE);
        }
    }

    void push(const T& value) {
        if (topIndex >= stackSize - 1) {
            cout << "Error: Stack overflow. Cannot push.";
            exit(EXIT_FAILURE);
        }
        arr[++topIndex] = value;
    }

    T pop() {
        if (isEmpty()) {
            cout << "Error: Stack is empty. Cannot pop.";
            exit(EXIT_FAILURE);
        }
        return arr[topIndex--];
    }

    T top() const {
        if (isEmpty()) {
            cout << "Error: Stack is empty. No top element.";
            exit(EXIT_FAILURE);
        }
        return arr[topIndex];
    }

    bool isEmpty() const {
        return topIndex == -1;
    }
};

bool isOperand(char op) {
    return '0' <= op && '9' >= op;
}

bool isOperator(char op) {
    switch (op) {
    case '+': 
    case '-': 
    case '*': 
    case '/': 
        return true;
    }
    return false;
}

double calc(double op1, double op2, char op) {
    switch (op) {
    case '+': return op1 + op2;
    case '-': return op1 - op2;
    case '*': return op1 * op2;
    case '/': return op1 / op2;
    }
    return 0.0;
}

int evalPosftix(const char* postFix) {
    Stack<double> s;
    while (*postFix != '\0') {
        if (isOperand(*postFix)) 
            s.push(*postFix - '0');
        else if (isOperator(*postFix)) {
            if (s.isEmpty()) {
                cout << "\nError in expression (at least one operand is missing";
                exit(0);
            }
            double op2 = s.pop();
            if (s.isEmpty()) {
                cout << "\nError in expression (at least one operand is missing";
                exit(0);
            }
            double op1 = s.pop();
            double res = calc(op1, op2, *postFix);
            s.push(res);
        }
        else if (!isspace(*postFix)) {
            cout << "Undefined symbol:" << *postFix << endl;
            exit(0);
        }
        postFix++;
    }
    if (s.isEmpty()) {
        cout << "\nError in expression (at least one operator is missing";
        exit(0);
    }
    double potentialRes = s.pop();
    if (!s.isEmpty()) {
        cout << "\nError in expression (at least one operator is missing";
        exit(0);
    }
    return potentialRes;
}
char* myStrcpy(char* t, const char* src) {
    int i = 0;
    while (*src != '\0') 
        t[i++] = *(src++);  
    t[i] = '\0';
    return t;
}

void postFixToInfix(const char* postFix, char* infix) {
    Stack<string> s;
    queue<string> q;
    
    while (*postFix != '\0') {
        if (isOperand(*postFix)) {
            string s1(1, *postFix);
            q.push(s1);
        }
        else if (isOperator(*postFix)) {
            if (q.size() < 2) {
                cout << "\nError in expression (at least one operand is missing";
                exit(0);
            }
            string op1 = q.front(); // First pop is the first operand
            q.pop();
            string op2 = q.front(); // Second pop is the second operand
            q.pop();
            string subExp = "(" + op1 + *postFix + op2 + ")";
            q.push(subExp);
        }
        else if (!isspace(*postFix)) {
            cout << "Undefined symbol:" << *postFix << endl;
            exit(0);
        }
        postFix++;
    }
    
    if (q.size() != 1) {
        cout << "\nError in expression (at least one operator is missing";
        exit(0);
    }
    
    string potentialInfix = q.front();
    q.pop();
    myStrcpy(infix, potentialInfix.c_str());
}





int main() {
    char postFix[] = "45+7*2-";
    cout << postFix << " evaluates to: " << evalPosftix(postFix) << endl;
    
    char infix[500];
    postFixToInfix(postFix, infix);
    cout << postFix << " is Equivalent to:  " << infix << endl;

    return 0;
}
