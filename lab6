#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

using namespace std;

class UnorderedSet {
private:
    Node* head;
    
public:
    UnorderedSet() : head(nullptr) {}

    // Destructor
    ~UnorderedSet() {
    	while(head!= nullptr){
    		previous= head;
    		head= head->next;
    		delete previous;
    		
		}
    }

    //insert an element into the set
    void insert(int value) {
        // Implement insertion algorithms(simplest that you know)
        Node *current = head;
        while(current!= nullptr){
        	if(current->data==value)
        		return;
        	current=current-next;
        	
        		
		}
		
		Node* newnode= new Node(value);
		newnode->next= head;
		head= newnode;
		
		
    }

    //remove an element from the set
    void remove(int value) {
        if (index < 0) {
        throw out_of_range("Index out of range: Index is negative");
    	}

    	if (index == 0) {
        pop_front();
        return;
    	}

	    Node* prev = nullptr;
	    Node* current = head;
	    int count = 0;
	    while (current != nullptr && count < index) {
	        prev = current;
	        current = current->next;
	        count++;
	    }
	
	    if (current == nullptr) {
	        throw out_of_range("Index out of range");
	    }
	
	    prev->next = current->next;
	
	    Node* removedNode = current;
	    delete removedNode;
			
		
		
        
    }

    //check if an element exists in the set
    bool contains(int value) const {
        //your implementation
        Node *current = head;
        while(current!= nullptr){
        	if(current->data==value)
        		return true;
        	current=current-next;
        	
        		
		}
        
        return false;
    }

    //get the size of the set
    int size() const {
        // your implementation to return the size of the set
        int count=0;
        while(current!= nullptr){
        	current=current-next;
        	count ++;
        	
        		
		}
        
        return count;
    }

    //check if the set is empty
    bool isEmpty() const {
        if(head==nullptr)
        	return true;
        else()
        	return false;
    }

    //clear the set
    void clear() {
        // your implementation to clear the set and deallocate memory
        while (head != nullptr) {
        	Node* temp = head;
        	head = head->next;
        	delete temp;
    	}
    }

    void printSet() const {
        // display the set elements
        Node* current= head;
        while(current!=nullptr){
        	cout << current->data << endl;
        	current=current->next;
        	
		}
    }

    //compute the intersection of two sets
    UnorderedSet intersection(const UnorderedSet& other) const {
    UnorderedSet result;
    // Iterate over each element in the current set
    for (const auto& element : *this) {
        if (this.contains(element) != other.contains(element)) {
            result.insert(element);
        }
    }
    return result;
}

    //compute the union of two sets
    UnorderedSet setUnion(const UnorderedSet& other) const {
        UnorderedSet result;
        // your implementation to compute union
        for (const auto& element : *this) {
        	if (this.contains(element) != other.contains(element)) {
            result.insert(element);
        	}
    }
        
        return result;
    }

    //compute the set difference of two sets
    UnorderedSet setDifference(const UnorderedSet& other) const {
        UnorderedSet result;
        // your implementation to compute set difference
        return result;
    }
};
